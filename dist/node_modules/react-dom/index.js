(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0;
	// export const ClassComponent = 1;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;

	const Noflags = 0b0000001;
	// Placement ChildDeletion 是跟结构相关的变化 Update 是跟属性相关的变化 当然这是对于HostComponent类型的组件而言
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0001000;
	// mutation 阶段需要执行的操作
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    return;
	    child;
	    sibling;
	    index;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        // 实例的属性
	        this.tag = tag;
	        this.key = key;
	        this.stateNode = null; // hostRoot节点才有的指向FiberRootNode
	        this.type = null; // 指向函数组件或者类组件
	        // 构成树状结构的属性
	        this.return = null; // 指向父级fiber
	        this.child = null; // 指向第一个子级fiber
	        this.sibling = null; // 指向下一个兄弟fiber
	        this.index = 0; // 在父级children数组中的索引
	        this.ref = null; // ref属性
	        // 作为工作单元
	        this.pendingProps = pendingProps; // 准备工作前的props
	        this.memoizedProps = null; // 工作完以后的props
	        this.memoizedState = null; // 更新完成的新state
	        this.updateQueue = null; // 保存
	        this.alternate = null; // 指向另一颗Fiber树
	        // 副作用
	        this.flags = Noflags; // 用于标记fiber 增删改
	        this.subtreeFlags = Noflags; // 用于标记子树的副作用
	    }
	}
	class FiberRootNode {
	    container; //保存对应宿主环境挂载的节点
	    current;
	    finishedWork; // 保存整个更新流程完成的hostRootFiber
	    constructor(container, hostFiberRoot) {
	        this.container = container;
	        this.current = hostFiberRoot;
	        hostFiberRoot.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = Noflags;
	        wip.subtreeFlags = Noflags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	// 根据element 创建fiber
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type === 'function' && true) {
	        console.log('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	// 向updateQueue中添加update
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	/**
	 * updateQueue消费update
	 * @param baseState
	 * @param pendingUpdate
	 * @returns
	 */
	const processUpdateQueue = (baseState, // 初始state
	pendingUpdate // 准备修改state的update
	) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            // baseState 1 update (x) => 4x -> memoizedState 4
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // baseState 1 update 2 -> memoizedState 2
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	// 判断宿主环境是否支持Symbol
	// Symbol.for(https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for)
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 如果支持Symbol，就用Symbol.for创建一个唯一的Symbol值，否则就用0xeac7
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// 根据shouldTrackEffects 判断是否应该标记副作用的flag
	function childReconciler(shouldTrackEffects) {
	    // 创建element fiber
	    function reconcileSingleElenment(returnFiber, currentFiber, element) {
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 创建text fiber
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 插入单一节点
	    function placeSingleChild(fiber) {
	        // 当 shouldTrackEffects 为true 即应该追踪副作用，且是首屏渲染，fiber.alternate 指向 current 树，为null证明是首屏渲染
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断fiber类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElenment(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	            }
	        }
	        // TODO 多节点的情况
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        // 其他情况
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = childReconciler(true);
	const mountChildFibers = childReconciler(false);

	// beginWork 递归中的向下递归阶段
	const beginWork = (wip) => {
	    // 比较，返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        default:
	            {
	                console.log('beginWork未实现的类型', wip.tag);
	            }
	            break;
	    }
	    return null;
	};
	// hostRoot的beginwork工作流程
	// 1、计算状态最新值
	// 2、创建子fiberNode节点
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	// hostComponent的beginwork工作流程
	// 1、创建子fiberNode节点
	// ? 为什么没有 计算状态最新值 我的理解是 hostComponent 没有内部状态，不需要维护
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    // 优化策略，mount阶段大量插入节点，可以构建离屏DOM树，一次性插入
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, current, children);
	    }
	}

	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type) => {
	    // TODO 处理props
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        // 向下遍历找到有副作用的节点，在回溯阶段进行副作用操作
	        if ((nextEffect.subtreeFlags & MutationMask) !== Noflags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 向上回溯 DFS
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFIber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFIber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    // 如果存在 Placement 的副作用
	    if ((flags & Placement) !== Noflags) {
	        // 执行添加DOM操作
	        commitPlacement(finishedWork);
	        // 删除Placement的副作用标记
	        finishedWork.flags &= ~Placement;
	    }
	    // flags Update
	    // flags ChildDeletion
	};
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // 找到要挂载的父节点 parent DOM 容器
	    const hostParent = getHostParent(finishedWork);
	    // 递归遍历子树，向容器添加新增的节点
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	// 找到要挂载的宿主容器
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        // 挂载的容器有两种 HostComponent 和 HostRoot
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.error('未找到父节点');
	    }
	    return null;
	}
	// 将新增节点挂载到容器中
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    // finishedWork 不一定是host类型的Fiber 需要向下递归找到host类型fiber
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        // 新增节点的DOM操作
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	// completeWork 递归中的回溯阶段
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1、构建DOM
	                // const instance = createInstance(wip.type, newProps);
	                const instance = createInstance(wip.type);
	                // 2、将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1、构建DOM
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.log('未处理的completeWork', wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    // 多叉树的前序遍历，向下遍历子节点，然后递归遍历兄弟节点，最后回溯
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	// 将子fiberNode的flags冒泡到父fiberNode，从父节点可以知道子节点有没有需要增删改，有的话则向下递归遍历子树
	function bubbleProperties(wip) {
	    let subtreeFlags = Noflags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let workInProgress = null;
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	// 在Fiber中调度Update
	function scheduleUpdateOnFiber(fiber) {
	    // TODO 调度功能
	    // fiberRootNode
	    const root = markUpdateFromFiberToRoot(fiber);
	    // 拿到fiberRootNode，再从根节点向下更新
	    renderRoot(root);
	}
	// 从更新节点回溯到根节点fiberRootNode
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    // 初始化 workInProgress 指向要开始递归的根节点
	    prepareFreshStack(root);
	    do {
	        try {
	            // 进入工作循环
	            workLoop();
	        }
	        catch (e) {
	            {
	                console.warn('workLoop出现错误', e);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    //  wip fiberNode树 树中的flags 执行DOM操作
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个字阶段需要执行的操作
	    // root 的 flags root 的 subtreeFlags 是否包含MutationMask中的Flags，如果有则存在mutation阶段需要执行的操作
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== Noflags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== Noflags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation Placement
	        commitMutationEffects(finishedWork);
	        // 双缓存树切换
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    // 开始递归
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    // 如果没有子节点了，就到回溯阶段
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        // 如果有子节点，就把 workInProgress 指向子节点 继续 workLoop 中的 while 循环，向下递归
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        // 如果有兄弟节点，继续递归兄弟节点
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        // 如果没有兄弟节点，就回溯到父节点
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// ReactDOM.createRoot(<)
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
