(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-runtime"] = {}));
})(this, (function (exports) { 'use strict';

	// 判断宿主环境是否支持Symbol
	// Symbol.for(https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for)
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 如果支持Symbol，就用Symbol.for创建一个唯一的Symbol值，否则就用0xeac7
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// jsx 方法是返回 ReactElement 的数据结构
	/**
	 * ReactElement 构造函数
	 * @param type
	 * @param key
	 * @param ref
	 * @param props
	 */
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'Nanyi' // 为了跟react源码区分，加了一个自定义标识
	    };
	    return element;
	};
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        // config中 key 和 ref 属性需要单独取出来
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 如果是config的属性，而不是原型上的，就放到props里面
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    const childrenLength = maybeChildren.length;
	    if (childrenLength) {
	        // props.children 有两种情况
	        // 1、是一个child 类型为 ReactElement
	        // 2、是多个child 类型为 Array<ReactElement>
	        if (childrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = (type, config) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        // config中 key 和 ref 属性需要单独取出来
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 如果是config的属性，而不是原型上的，就放到props里面
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
